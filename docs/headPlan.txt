cases :
1) flow with only given file                            node head.js 1.txt

2) flow with given file with line number                node head.js -n12 1.txt

3) flow with piped input(stdin)                         cat 1.txt | node head.js


3) flow with more then one file                         node head.js 1.txt 2.txt

4) flow with more then one file with line number        node head.js -n12 1.txt


6) flow with piped input with line number(stdin)        cat 1.txt | node head.js -n12





flow


[1.1] the previous step 
--output-- string : linesToBePrinted
"1
2
3
4
5
6
7
8
9
10"

the output will be the contents of lines up to given line number of given file(if line number is not given then it will give 10 lines of given file)  

--input1-- string : fileContent 
"whole file content in string"

--input2-- number : lineNum
10

name : generateHeadMessage(lineNum)

[1.2] the previous step 

--output-- list of string : fileContent 
["whole file content of one file in string", "whole file content of other file"]

--input-- string : reader, list of string : path
fileReader and ["./sampleFile.txt","anotherFile.txt"]

name : getContent(reader, path)

[1.3] the previous step 
--output-- object : userArgs
{reader : fileReader , path : [for more then one file], lineNumber : for inputs without given line number the default 10 lines will be given. }

--input-- array of string : commandLineArgs
["input given from command line separated by ,"]

name : parseArgs(commandLineArgs)
